// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

contract Alinan {

    event alinan(address yonetici, uint bakiye, string mesaj);

    receive () external payable {}

    fallback() external payable {
        emit alinan(msg.sender, msg.value, "Fallback cagirildi.");
    }

    function gonder(string memory _mesaj, uint _x) public payable returns (uint) {
        emit alinan(msg.sender, msg.value, _mesaj);

        return _x + 1;
    }
}

contract Yonetici {

    event tepki(bool sonuc, bytes veri);

    function testCallGonder(address payable _adres) public payable {
        
        (bool sonuc, bytes memory veri) = _adres.call{value: msg.value, gas: 5000}(
            abi.encodeWithSignature("testCallGonder(string,uint256)", "call testCallGonder", 123)
        );

        emit tepki(sonuc, veri);
    }

    function testCallDoesNotExist(address _adres) public {
        (bool sonuc, bytes memory veri) = _adres.call(
            abi.encodeWithSignature("doesNotExist()")
        );

        emit tepki(sonuc, veri);
    }

}
